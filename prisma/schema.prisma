// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  full_name  String
  phone      String
  email      String?
  username   String     @unique
  password   String
  branch_id  String?    @db.ObjectId
  role_code  String
  last_login DateTime   @default(now())
  active     Boolean    @default(true)
  customers  Customer[]
  sales      Sale[]
  expenses   Expenses[]

  branch        Branch?        @relation(fields: [branch_id], references: [id] , onDelete: NoAction)
  role          Role           @relation(fields: [role_code], references: [code])
  Supplies      Supplies[]
  Transfers     Transfer[]
  Transaction   Transaction[]
  notifications Notification[]
  supplier      Supplier[]
  Drawings      Drawings[]
}

model Customer {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  phone      String
  address    String
  balance    Float  @default(0.0)
  created_by String @db.ObjectId

  createdBy User @relation(fields: [created_by], references: [id]) // Creating the relation to User
}

model Product {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique()
  unit          String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now())
  stock         Stock[] // A product can be in stock at multiple branches
  SaleProduct   SaleProduct[]
  distributions Distribution[]
  Drawings      Drawings[]
}

model Drawings {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  product_id  String  @db.ObjectId
  quantity    Float
  reason      String
  stock_as_at Float // A product can be in stock at multiple branches
  product     Product? @relation(fields: [product_id], references: [id])
  created_by  String  @db.ObjectId

  createdBy  User?     @relation(fields: [created_by], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Stock {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  selling_price Float // Selling price for the product at this branch
  cost_price    Float // Cost price for the product at this branch
  quantity      Float // Quantity available at this branch
  branch        Branch   @relation(fields: [branch_id], references: [id])
  branch_id     String   @db.ObjectId
  product       Product? @relation(fields: [product_id], references: [id] , onDelete: NoAction)
  product_id    String?  @db.ObjectId

  @@unique([product_id, branch_id])
}

// model Inventory {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   supplied_by String @db.ObjectId
//   branch_id   String @db.ObjectId

//   branch   Branch   @relation(fields: [branch_id], references: [id])
//   supplier Supplier @relation(fields: [supplied_by], references: [id])

//   // products Product[] // An inventory can contain multiple products
// }

model Expenses {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String
  Type        Type
  created_at  DateTime @default(now())
  created_by  String   @db.ObjectId

  createdBy User @relation(fields: [created_by], references: [id])
}

enum Type {
  SALES
  BANK
  DEPOSIT
  SALARY
  BF
  PaidD
  UTILITIES
  OTHER
}

enum SaleStatus {
  COMPLETED
  TBC
  CREDIT
  RETURNED
}

model Sale {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  sale_id          String        @unique
  total_amount     Float
  amount_paid      Float?
  discount         Float?        @default(0.00)
  status           SaleStatus    @default(COMPLETED)
  initiated_by     String        @db.ObjectId
  branch_id        String        @db.ObjectId
  buyer_name       String?
  buyer_phone      String?
  buyer_address    String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  isCollected      Json? // {status : false , date: new Date}
  return_reason    String?
  original_sale_id String?
  original_sale    Sale?         @relation("ReturnedSale", fields: [original_sale_id], references: [sale_id], onDelete: NoAction, onUpdate: NoAction)
  returned_sales   Sale[]        @relation("ReturnedSale")
  branch           Branch        @relation(fields: [branch_id], references: [id])
  products         SaleProduct[]
  initiator        User          @relation(fields: [initiated_by], references: [id])
  Debt             Debt[]
}

model SaleProduct {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  sale       Sale    @relation(fields: [sale_id], references: [sale_id], onDelete: Cascade)
  sale_id    String
  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @db.ObjectId
  quantity   Int
  unit_price Float
  cost_price Float
}

model Supplies {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  initiated_by     String         @db.ObjectId
  supplier_name    String?
  supplier_phone   String?
  supplier_email   String?
  supplier_address String?
  supply_date      DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  products         Json // [{product: "Cement" , unit: "Bag(s)" , quantity: 100 , unit_cost:  }]             
  createdBy        User           @relation(fields: [initiated_by], references: [id])
  distributions    Distribution[]
}

model Supplier {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  created_by String  @db.ObjectId
  phone      String  @unique
  email      String?
  address    String?

  createdBy User @relation(fields: [created_by], references: [id])
  // balance     Float       @default(0.0)
}

enum Status {
  CONFIRMED
  REJECTED
  NONE
}

model Distribution {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  product        Product  @relation(fields: [product_id], references: [id])
  product_id     String   @db.ObjectId
  branch_id      String   @db.ObjectId
  quantity       Float
  selling_price  Float
  calc_unit_cost Float
  status         Status   @default(NONE)
  supply_id      String   @db.ObjectId
  branch         Branch   @relation(fields: [branch_id], references: [id])
  supply         Supplies @relation(fields: [supply_id], references: [id], onDelete: Cascade)
}

enum NotiType {
  Distribution
  Transfer
  ConDist
  RejDist
  UpdDist
  ConTrans
  RejTrans
}

model Notification {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  sender           String   @db.ObjectId
  receiving_branch String?  @db.ObjectId
  receipient       String?
  type             NotiType
  type_id          String?
  created_at       DateTime @default(now())
  isViewed         Boolean  @default(false)
  r_branch         Branch?  @relation(fields: [receiving_branch], references: [id])
  sentBy           User     @relation(fields: [sender], references: [id])
}

model Transfer {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  initiated_by     String   @db.ObjectId
  // trans_branch     String   @db.ObjectId
  receiving_branch String   @db.ObjectId
  trans_date       DateTime @default(now())
  updated_at       DateTime @updatedAt
  status           Status   @default(NONE)
  products         Json[] // [{product: "Cement" , unit: "Bag(s)" , quantity: 100  }]

  // t_branch  Branch @relation("t_branch", fields: [trans_branch], references: [id])
  r_branch  Branch @relation("r_branch", fields: [receiving_branch], references: [id])
  createdBy User   @relation(fields: [initiated_by], references: [id])
}

model Branch {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name  String
  code  String @unique
  users User[]
  sales Sale[]

  distributions Distribution[]
  Stocks        Stock[]
  // t_branch      Transfer[]     @relation("t_branch") // Define the opposite relation for transfers initiated
  r_branch      Transfer[]     @relation("r_branch")
  notifications Notification[]
}

model Role {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  code        String @unique
  description String
  users       User[]
}

enum DebtStatus {
  Owing
  Paid
  BadDebt
}

model Debt {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  sale_id    String     @unique
  repayments Json? //[{rep_date : date , amount: 12}]
  status     DebtStatus
  sale       Sale       @relation(fields: [sale_id], references: [sale_id])
  created_at DateTime   @default(now())
}

enum Io {
  I
  O
}

model Transaction {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  description  String?
  amount       Float
  type         Type
  type_id      String?
  io           Io
  initiated_by String   @db.ObjectId
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  createdBy User @relation(fields: [initiated_by], references: [id])
}
